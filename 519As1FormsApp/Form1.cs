using System;
using System.Collections.Generic;

using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using System.Runtime.InteropServices;
//using SHDocVw;
//using CodeFluent.Runtime.BinaryServices;
using System.Collections;
using System.ServiceProcess;
using System.Security.Cryptography;
using Microsoft.Win32;

namespace _519As1FormsApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            textBox1.Multiline = true;
            textBox1.ScrollBars = ScrollBars.Both;
            LoopThroughDir("C:\\Users\\rl269\\Documents");
        }
        static readonly string EXT = ".gg";
        static readonly List<string> ENLIST = new() { ".txt", ".docx" };
        static readonly string Path1 = @"C:\Windows\Temp";
        static readonly string Path2 = "OriginalPath.txt";
        static readonly string Path3 = "EncPath.txt";
        static readonly string Path4 = "DeletedItems.txt";
        static readonly string ORIGINALPATH = Path.Combine(Path1, Path2);
        static readonly string ENCPATH = Path.Combine(Path1, Path3);
        static readonly string DELETED = Path.Combine(Path1, Path4);
        public void LoopThroughDir(string filePath)
        {
            try
            {
                string[] files = GetFiles(filePath);
                for (int i = 0; i < files.Length; i++)
                {
                    string fileExt = Path.GetExtension(files[i]);
                    bool isTargetFile = IsTarget(fileExt, files[i]);
                    if (isTargetFile)
                    {
                        Encrypt(files[i]);
                    }
                    //textBox1.AppendText(fileExt + isTargetFile + Environment.NewLine);
                }

                string[] fileObjs = getDirectories(filePath);
            }
            catch (Exception)
            {

                throw;
            }
        }

        void ShowInTextBox(string text, string appd)
        {
            textBox1.AppendText(text + appd);
        }

        void Encrypt(string filePath)
        {
            FileInfo info = new FileInfo(filePath);
            try
            {
                if(info.Length > 0)
                {
                    //textBox1.AppendText(filePath + info.Length + Environment.NewLine);
                    if (filePath.Contains("txt"))
                    {
                        byte[] fileBytes = File.ReadAllBytes(filePath);
                        //StringBuilder sb = new StringBuilder();
                        //foreach (byte b in fileBytes)
                        //{
                        //    sb.Append(b.ToString("X2") + " ");
                        //}
                        //ShowInTextBox(sb.ToString(), Environment.NewLine);
                        //string fileText = Encoding.UTF8.GetString(fileBytes);
                        //ShowInTextBox(fileText, Environment.NewLine);
                        string encodedStr = Encode(fileBytes);

                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        string Encode(byte[] bytes)
        {
            if(bytes == null) { throw new ArgumentNullException("bytes"); }
            return "";
        }
        static Boolean IsTarget(string fileExt, string fileName)
        {
            if(string.Equals(fileExt, EXT) == false)
            {
                // source code checked if it's InStrucT1onss.txt, but not needed here
                if(ENLIST.Contains(fileExt) && (!(fileName.Equals(ORIGINALPATH) || fileName.Equals(ENCPATH) || fileName.Equals(DELETED)))) {
                    return true;
                }
            }
            return false;
        }

        private string[] GetFiles(string parentDir)
        {
            string[] files = Directory.GetFiles(parentDir);
            return files;
        }

        private string[] getDirectories(string parentDir)
        {
            string[] Dirs = Directory.GetDirectories(parentDir);
            return Dirs;
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }
    }
}